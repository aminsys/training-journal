/*
 * Training Journal - OpenAPI 3.0
 *
 * This a personal training journal API Server based on the OpenAPI 3.0 specification.  ### GitHub repo of the project: - [My GitHub](https://github.com/aminsys/training-journal)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Exercises : IEquatable<Exercises>
    { 
        /// <summary>
        /// Exercise&#x27;s ID
        /// </summary>
        /// <value>Exercise&#x27;s ID</value>

        [DataMember(Name="exerciseId")]
        public long? ExerciseId { get; set; }

        /// <summary>
        /// Name of exercise
        /// </summary>
        /// <value>Name of exercise</value>

        [DataMember(Name="exerciseName")]
        public string ExerciseName { get; set; }

        /// <summary>
        /// Gets or Sets Sets
        /// </summary>

        [DataMember(Name="sets")]
        public int? Sets { get; set; }

        /// <summary>
        /// Gets or Sets Reps
        /// </summary>

        [DataMember(Name="reps")]
        public int? Reps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Exercises {\n");
            sb.Append("  ExerciseId: ").Append(ExerciseId).Append("\n");
            sb.Append("  ExerciseName: ").Append(ExerciseName).Append("\n");
            sb.Append("  Sets: ").Append(Sets).Append("\n");
            sb.Append("  Reps: ").Append(Reps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Exercises)obj);
        }

        /// <summary>
        /// Returns true if Exercises instances are equal
        /// </summary>
        /// <param name="other">Instance of Exercises to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Exercises other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExerciseId == other.ExerciseId ||
                    ExerciseId != null &&
                    ExerciseId.Equals(other.ExerciseId)
                ) && 
                (
                    ExerciseName == other.ExerciseName ||
                    ExerciseName != null &&
                    ExerciseName.Equals(other.ExerciseName)
                ) && 
                (
                    Sets == other.Sets ||
                    Sets != null &&
                    Sets.Equals(other.Sets)
                ) && 
                (
                    Reps == other.Reps ||
                    Reps != null &&
                    Reps.Equals(other.Reps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExerciseId != null)
                    hashCode = hashCode * 59 + ExerciseId.GetHashCode();
                    if (ExerciseName != null)
                    hashCode = hashCode * 59 + ExerciseName.GetHashCode();
                    if (Sets != null)
                    hashCode = hashCode * 59 + Sets.GetHashCode();
                    if (Reps != null)
                    hashCode = hashCode * 59 + Reps.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Exercises left, Exercises right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Exercises left, Exercises right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
